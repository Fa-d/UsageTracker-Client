package dev.sadakat.screentimetracker.core.data.mapper

import dev.sadakat.screentimetracker.core.domain.model.*
import dev.sadakat.screentimetracker.data.local.entities.UserGoal as UserGoalEntity

/**
 * Bidirectional mapper between UserGoal domain models and data entities.
 */
class UserGoalDataMapper {

    // ==================== Domain to Data Entity Mapping ====================

    fun mapToUserGoalEntity(userGoal: UserGoal): UserGoalEntity {
        return UserGoalEntity(
            id = 0, // Auto-generated by Room
            goalType = mapGoalTypeToString(userGoal.type),
            targetValue = userGoal.targetValue,
            currentProgress = userGoal.currentProgress,
            packageName = null, // Would need to be mapped from domain if needed
            deadline = userGoal.deadline,
            isActive = userGoal.isActive,
            createdAt = userGoal.createdAt,
            updatedAt = System.currentTimeMillis()
        )
    }

    // ==================== Data Entity to Domain Model Mapping ====================

    fun mapToUserGoal(entity: UserGoalEntity): UserGoal {
        val goalType = mapStringToGoalType(entity.goalType)
        val (title, description, unit, priority) = getDefaultGoalAttributes(goalType, entity.targetValue)

        return UserGoal(
            id = entity.id.toString(),
            title = title,
            description = description,
            type = goalType,
            targetValue = entity.targetValue,
            currentProgress = entity.currentProgress,
            unit = unit,
            deadline = entity.deadline,
            isActive = entity.isActive,
            createdAt = entity.createdAt,
            completedAt = if (entity.currentProgress >= entity.targetValue) entity.updatedAt else null,
            priority = priority
        )
    }

    // ==================== Batch Mapping Functions ====================

    fun mapToUserGoalEntities(userGoals: List<UserGoal>): List<UserGoalEntity> {
        return userGoals.map { mapToUserGoalEntity(it) }
    }

    fun mapToUserGoals(entities: List<UserGoalEntity>): List<UserGoal> {
        return entities.map { mapToUserGoal(it) }
    }

    // ==================== Type Mapping Helpers ====================

    private fun mapGoalTypeToString(type: GoalType): String {
        return when (type) {
            GoalType.SCREEN_TIME_LIMIT -> "daily_screen_time"
            GoalType.UNLOCK_LIMIT -> "unlock_frequency"
            GoalType.FOCUS_SESSIONS -> "focus_sessions"
            GoalType.PRODUCTIVE_TIME -> "productive_time"
            GoalType.APP_LIMIT -> "app_specific_limit"
            GoalType.WELLNESS_STREAK -> "wellness_streak"
            GoalType.DIGITAL_DETOX -> "digital_detox"
            GoalType.SLEEP_HYGIENE -> "sleep_hygiene"
        }
    }

    private fun mapStringToGoalType(typeString: String): GoalType {
        return when (typeString) {
            "daily_screen_time" -> GoalType.SCREEN_TIME_LIMIT
            "unlock_frequency" -> GoalType.UNLOCK_LIMIT
            "focus_sessions" -> GoalType.FOCUS_SESSIONS
            "productive_time" -> GoalType.PRODUCTIVE_TIME
            "app_specific_limit" -> GoalType.APP_LIMIT
            "session_limit" -> GoalType.APP_LIMIT // Map to APP_LIMIT
            "break_goals" -> GoalType.WELLNESS_STREAK // Map to WELLNESS_STREAK
            "wellness_streak" -> GoalType.WELLNESS_STREAK
            "digital_detox" -> GoalType.DIGITAL_DETOX
            "sleep_hygiene" -> GoalType.SLEEP_HYGIENE
            else -> GoalType.SCREEN_TIME_LIMIT // Default fallback
        }
    }

    private data class GoalAttributes(
        val title: String,
        val description: String,
        val unit: GoalUnit,
        val priority: GoalPriority
    )

    private fun getDefaultGoalAttributes(type: GoalType, targetValue: Long): GoalAttributes {
        return when (type) {
            GoalType.SCREEN_TIME_LIMIT -> GoalAttributes(
                title = "Daily Screen Time Limit",
                description = "Keep daily screen time under ${targetValue / (60 * 60 * 1000)} hours",
                unit = GoalUnit.MILLISECONDS,
                priority = GoalPriority.HIGH
            )
            GoalType.UNLOCK_LIMIT -> GoalAttributes(
                title = "Daily Unlock Limit",
                description = "Keep phone unlocks under $targetValue per day",
                unit = GoalUnit.COUNT,
                priority = GoalPriority.MEDIUM
            )
            GoalType.FOCUS_SESSIONS -> GoalAttributes(
                title = "Daily Focus Sessions",
                description = "Complete $targetValue focus sessions today",
                unit = GoalUnit.COUNT,
                priority = GoalPriority.HIGH
            )
            GoalType.PRODUCTIVE_TIME -> GoalAttributes(
                title = "Daily Productive Time",
                description = "Spend ${targetValue / (60 * 60 * 1000)} hours on productive apps",
                unit = GoalUnit.MILLISECONDS,
                priority = GoalPriority.MEDIUM
            )
            GoalType.APP_LIMIT -> GoalAttributes(
                title = "App Usage Limit",
                description = "Limit app usage to ${targetValue / (60 * 1000)} minutes",
                unit = GoalUnit.MILLISECONDS,
                priority = GoalPriority.MEDIUM
            )
            GoalType.WELLNESS_STREAK -> GoalAttributes(
                title = "Wellness Streak",
                description = "Maintain wellness goals for $targetValue days",
                unit = GoalUnit.COUNT,
                priority = GoalPriority.LOW
            )
            GoalType.DIGITAL_DETOX -> GoalAttributes(
                title = "Digital Detox",
                description = "Take a break from devices for ${targetValue / (60 * 60 * 1000)} hours",
                unit = GoalUnit.MILLISECONDS,
                priority = GoalPriority.CRITICAL
            )
            GoalType.SLEEP_HYGIENE -> GoalAttributes(
                title = "Sleep Hygiene",
                description = "No device usage ${targetValue / 60} minutes before bed",
                unit = GoalUnit.MINUTES,
                priority = GoalPriority.HIGH
            )
        }
    }

    // ==================== Goal Statistics Mapping ====================

    fun mapToGoalStatistics(
        entities: List<UserGoalEntity>,
        timeRange: TimeRange
    ): dev.sadakat.screentimetracker.core.domain.repository.GoalStatistics {
        val totalGoals = entities.size
        val completedGoals = entities.count { it.currentProgress >= it.targetValue }
        val activeGoals = entities.count { it.isActive }
        val overdueGoals = entities.count { entity ->
            entity.deadline != null &&
            entity.deadline < System.currentTimeMillis() &&
            entity.currentProgress < entity.targetValue
        }

        val completionRate = if (totalGoals > 0) {
            completedGoals.toFloat() / totalGoals
        } else 0f

        val averageCompletionTime = if (completedGoals > 0) {
            entities.filter { it.currentProgress >= it.targetValue }
                .map { (it.updatedAt - it.createdAt) }
                .average().toLong()
        } else 0L

        val goalsByType = entities.groupBy { mapStringToGoalType(it.goalType) }
            .mapValues { it.value.size }

        val completionsByType = entities.filter { it.currentProgress >= it.targetValue }
            .groupBy { mapStringToGoalType(it.goalType) }
            .mapValues { it.value.size }

        return dev.sadakat.screentimetracker.core.domain.repository.GoalStatistics(
            totalGoals = totalGoals,
            completedGoals = completedGoals,
            activeGoals = activeGoals,
            overdueGoals = overdueGoals,
            completionRate = completionRate,
            averageCompletionTime = averageCompletionTime,
            goalsByType = goalsByType,
            completionsByType = completionsByType
        )
    }

    // ==================== Validation Helpers ====================

    fun validateUserGoal(userGoal: UserGoal): Boolean {
        return userGoal.id.isNotBlank() &&
               userGoal.title.isNotBlank() &&
               userGoal.targetValue > 0 &&
               userGoal.currentProgress >= 0 &&
               userGoal.currentProgress <= userGoal.targetValue &&
               userGoal.createdAt > 0
    }

    fun validateUserGoalEntity(entity: UserGoalEntity): Boolean {
        return entity.id > 0 &&
               entity.goalType.isNotBlank() &&
               entity.targetValue > 0 &&
               entity.currentProgress >= 0 &&
               entity.createdAt > 0
    }
}